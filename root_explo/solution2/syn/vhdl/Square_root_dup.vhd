-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Square_root_dup is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Square_root_dup is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv52_A : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001010";
    constant ap_const_lv105_1999999999999A : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv105_0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal x_assign_cast_cast_cast_fu_177_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal cou1_cast_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cou1_cast_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal cou1_fu_191_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal cou1_reg_404 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_207_p2 : STD_LOGIC_VECTOR (104 downto 0);
    signal mul_reg_409 : STD_LOGIC_VECTOR (104 downto 0);
    signal tmp_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_420 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_3_fu_231_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_cast_fu_239_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f_cast_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_cast_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_253_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_440 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_294_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_14_reg_445 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_126 : BOOLEAN;
    signal i_1_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_453 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal exitcond_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_1_fu_362_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal arr_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_ce0 : STD_LOGIC;
    signal arr_we0 : STD_LOGIC;
    signal arr_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_ce1 : STD_LOGIC;
    signal arr_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_103 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_180 : BOOLEAN;
    signal y1_reg_114 : STD_LOGIC_VECTOR (51 downto 0);
    signal i_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal z_reg_135 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_cast_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_147_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_shl1_fu_159_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_cast_fu_155_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_shl1_cast_fu_167_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal y_fu_171_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_207_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal cou1_cast2_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal neg_mul_fu_259_p2 : STD_LOGIC_VECTOR (104 downto 0);
    signal tmp_17_fu_264_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_1_fu_274_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_278_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_10_fu_281_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal neg_ti_fu_288_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast1_fu_306_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_326_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_344_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_350_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_fu_358_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_303 : BOOLEAN;
    signal grp_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_382_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal extLd_cast_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_382_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_197_ap_start : STD_LOGIC;
    signal grp_fu_197_ap_done : STD_LOGIC;
    signal tmp_13_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);

    component Square_root_srem_51ns_5ns_5_55_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Square_root_mac_muladd_5s_5s_15s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Square_root_dup_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    arr_U : component Square_root_dup_arr
    generic map (
        DataWidth => 5,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arr_address0,
        ce0 => arr_ce0,
        we0 => arr_we0,
        d0 => arr_d0,
        q0 => arr_q0,
        address1 => arr_address1,
        ce1 => arr_ce1,
        q1 => arr_q1);

    Square_root_srem_51ns_5ns_5_55_seq_U1 : component Square_root_srem_51ns_5ns_5_55_seq
    generic map (
        ID => 1,
        NUM_STAGE => 55,
        din0_WIDTH => 51,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_197_ap_start,
        done => grp_fu_197_ap_done,
        din0 => grp_fu_197_p0,
        din1 => grp_fu_197_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    Square_root_mac_muladd_5s_5s_15s_32_1_U2 : component Square_root_mac_muladd_5s_5s_15s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_382_p0,
        din1 => grp_fu_382_p1,
        din2 => grp_fu_382_p2,
        dout => grp_fu_382_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
                    ap_return_preg <= tmp_13_fu_376_p3;
                end if; 
            end if;
        end if;
    end process;


    i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_185_p2 = ap_const_lv1_0)))) then 
                i_reg_124 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
                i_reg_124 <= i_1_reg_453;
            end if; 
        end if;
    end process;

    indvars_iv_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvars_iv_reg_103 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
                indvars_iv_reg_103 <= cou1_reg_404;
            end if; 
        end if;
    end process;

    y1_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y1_reg_114 <= x_assign_cast_cast_cast_fu_177_p1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
                y1_reg_114 <= tmp_14_reg_445;
            end if; 
        end if;
    end process;

    z_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_185_p2 = ap_const_lv1_0)))) then 
                z_reg_135 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
                z_reg_135 <= z_1_fu_362_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    cou1_cast_reg_396(4 downto 0) <= cou1_cast_fu_181_p1(4 downto 0);
                cou1_reg_404 <= cou1_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then
                i_1_reg_453 <= i_1_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_185_p2 = ap_const_lv1_0))) then
                mul_reg_409 <= mul_fu_207_p2;
                tmp_16_reg_414 <= y1_reg_114(51 downto 51);
                tmp_18_reg_420 <= mul_fu_207_p2(104 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_185_p2 = ap_const_lv1_0)))) then
                p_lshr_f_cast_reg_430 <= indvars_iv_reg_103(4 downto 1);
                    tmp_1_cast_reg_435(3 downto 0) <= tmp_1_cast_fu_249_p1(3 downto 0);
                tmp_3_reg_425 <= tmp_3_fu_231_p1;
                tmp_6_reg_440 <= tmp_6_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_14_reg_445 <= tmp_14_fu_294_p3;
            end if;
        end if;
    end process;
    cou1_cast_reg_396(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_1_cast_reg_435(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_185_p2, exitcond_fu_315_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_fu_185_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st57_fsm_56;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st57_fsm_56 => 
                if (not((ap_const_lv1_0 = exitcond_fu_315_p2))) then
                    ap_NS_fsm <= ap_ST_st59_fsm_58;
                else
                    ap_NS_fsm <= ap_ST_st58_fsm_57;
                end if;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58, tmp_13_fu_376_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            ap_return <= tmp_13_fu_376_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_126 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    ap_sig_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_180 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    ap_sig_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_303 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_126)
    begin
        if (ap_sig_126) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_180)
    begin
        if (ap_sig_180) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_303)
    begin
        if (ap_sig_303) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    arr_address0_assign_proc : process(cou1_cast_reg_396, tmp_3_reg_425, tmp_1_cast_reg_435, ap_sig_cseq_ST_st57_fsm_56, exitcond_fu_315_p2, ap_sig_cseq_ST_st56_fsm_55, tmp_7_cast_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            arr_address0 <= cou1_cast_reg_396(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) and not((ap_const_lv1_0 = exitcond_fu_315_p2)) and not((ap_const_lv1_0 = tmp_3_reg_425)))) then 
            arr_address0 <= tmp_1_cast_reg_435(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) and (ap_const_lv1_0 = exitcond_fu_315_p2))) then 
            arr_address0 <= tmp_7_cast_fu_331_p1(5 - 1 downto 0);
        else 
            arr_address0 <= "XXXXX";
        end if; 
    end process;

    arr_address1 <= i_cast_fu_310_p1(5 - 1 downto 0);

    arr_ce0_assign_proc : process(tmp_3_reg_425, ap_sig_cseq_ST_st57_fsm_56, exitcond_fu_315_p2, ap_sig_cseq_ST_st56_fsm_55)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) and (ap_const_lv1_0 = exitcond_fu_315_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) and not((ap_const_lv1_0 = exitcond_fu_315_p2)) and not((ap_const_lv1_0 = tmp_3_reg_425))) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_sig_cseq_ST_st57_fsm_56)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d0 <= grp_fu_197_p2(5 - 1 downto 0);

    arr_we0_assign_proc : process(ap_sig_cseq_ST_st56_fsm_55)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cou1_cast2_fu_235_p1 <= std_logic_vector(resize(unsigned(indvars_iv_reg_103),6));
    cou1_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(indvars_iv_reg_103),64));
    cou1_fu_191_p2 <= std_logic_vector(unsigned(indvars_iv_reg_103) + unsigned(ap_const_lv5_1));
    exitcond_fu_315_p2 <= "1" when (i_reg_124 = p_lshr_f_cast_reg_430) else "0";
        extLd_cast_fu_368_p1 <= std_logic_vector(resize(signed(arr_q0),10));


    grp_fu_197_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_185_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_185_p2 = ap_const_lv1_0))) then 
            grp_fu_197_ap_start <= ap_const_logic_1;
        else 
            grp_fu_197_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_197_p0 <= y1_reg_114(51 - 1 downto 0);
    grp_fu_197_p1 <= ap_const_lv52_A(5 - 1 downto 0);
    grp_fu_382_p0 <= extLd_cast_fu_368_p1(5 - 1 downto 0);
    grp_fu_382_p1 <= extLd_cast_fu_368_p1(5 - 1 downto 0);
    grp_fu_382_p2 <= tmp_11_fu_372_p1(15 - 1 downto 0);
    i_1_fu_320_p2 <= std_logic_vector(unsigned(i_reg_124) + unsigned(ap_const_lv4_1));
    i_cast1_fu_306_p1 <= std_logic_vector(resize(unsigned(i_reg_124),6));
    i_cast_fu_310_p1 <= std_logic_vector(resize(unsigned(i_reg_124),64));
    mul_fu_207_p1 <= y1_reg_114(51 - 1 downto 0);
    mul_fu_207_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv105_1999999999999A) * signed(mul_fu_207_p1))), 105));
    neg_mul_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv105_0) - unsigned(mul_reg_409));
    neg_ti_fu_288_p2 <= std_logic_vector(unsigned(ap_const_lv52_0) - unsigned(tmp_10_fu_281_p3));
    p_lshr_f_cast_fu_239_p4 <= indvars_iv_reg_103(4 downto 1);
        p_shl1_cast_fu_167_p1 <= std_logic_vector(resize(signed(p_shl1_fu_159_p3),36));

    p_shl1_fu_159_p3 <= (x & ap_const_lv1_0);
        p_shl_cast_fu_155_p1 <= std_logic_vector(resize(signed(p_shl_fu_147_p3),36));

    p_shl_fu_147_p3 <= (x & ap_const_lv3_0);
    tmp_10_fu_281_p3 <= 
        tmp_1_fu_274_p1 when (tmp_16_reg_414(0) = '1') else 
        tmp_5_fu_278_p1;
        tmp_11_fu_372_p1 <= std_logic_vector(resize(signed(z_reg_135),32));

    tmp_13_fu_376_p3 <= 
        grp_fu_382_p3 when (tmp_3_reg_425(0) = '1') else 
        tmp_11_fu_372_p1;
    tmp_14_fu_294_p3 <= 
        neg_ti_fu_288_p2 when (tmp_16_reg_414(0) = '1') else 
        tmp_5_fu_278_p1;
    tmp_15_fu_350_p3 <= (tmp_8_fu_344_p2 & ap_const_lv1_0);
    tmp_17_fu_264_p4 <= neg_mul_fu_259_p2(104 downto 56);
    tmp_1_cast_fu_249_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_cast_fu_239_p4),64));
        tmp_1_fu_274_p1 <= std_logic_vector(resize(signed(tmp_17_fu_264_p4),52));

    tmp_3_fu_231_p1 <= indvars_iv_reg_103(1 - 1 downto 0);
        tmp_5_fu_278_p1 <= std_logic_vector(resize(signed(tmp_18_reg_420),52));

    tmp_6_fu_253_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(cou1_cast2_fu_235_p1));
        tmp_7_cast_fu_331_p1 <= std_logic_vector(resize(signed(tmp_7_fu_326_p2),64));

    tmp_7_fu_326_p2 <= std_logic_vector(unsigned(tmp_6_reg_440) - unsigned(i_cast1_fu_306_p1));
    tmp_8_fu_344_p0 <= arr_q0;
    tmp_8_fu_344_p1 <= arr_q1;
    tmp_8_fu_344_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_fu_344_p0) * signed(tmp_8_fu_344_p1))), 10));
        tmp_9_cast_fu_358_p1 <= std_logic_vector(resize(signed(tmp_15_fu_350_p3),15));

    tmp_fu_185_p2 <= "1" when (y1_reg_114 = ap_const_lv52_0) else "0";
        x_assign_cast_cast_cast_fu_177_p1 <= std_logic_vector(resize(signed(y_fu_171_p2),52));

    y_fu_171_p2 <= std_logic_vector(signed(p_shl_cast_fu_155_p1) + signed(p_shl1_cast_fu_167_p1));
    z_1_fu_362_p2 <= std_logic_vector(unsigned(z_reg_135) + unsigned(tmp_9_cast_fu_358_p1));
end behav;
