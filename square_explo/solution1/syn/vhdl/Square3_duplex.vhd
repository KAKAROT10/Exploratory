-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Square3_duplex is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Square3_duplex is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv129_lc_2 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_104 : BOOLEAN;
    signal arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_118 : BOOLEAN;
    signal ap_sig_cseq_ST_st80_fsm_79 : STD_LOGIC;
    signal ap_sig_125 : BOOLEAN;
    signal cou1_1_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cou1_1_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal tmp_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_reg_453 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_167 : BOOLEAN;
    signal tmp_21_reg_458 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_17_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_463 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_178 : BOOLEAN;
    signal neg_ti_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal neg_ti_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_1_fu_285_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_1_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_201 : BOOLEAN;
    signal i_1_fu_308_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_486 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_210 : BOOLEAN;
    signal tmp_5_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_329_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_load_1_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_238 : BOOLEAN;
    signal z_2_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st79_fsm_78 : STD_LOGIC;
    signal ap_sig_247 : BOOLEAN;
    signal tmp_14_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st86_fsm_85 : STD_LOGIC;
    signal ap_sig_258 : BOOLEAN;
    signal arr_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_ce0 : STD_LOGIC;
    signal arr_we0 : STD_LOGIC;
    signal arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal arr_ce1 : STD_LOGIC;
    signal cou1_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_281 : BOOLEAN;
    signal y_reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_lshr_fu_192_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_212_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_neg_t_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_250_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_20_fu_255_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_13_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_272_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_387 : BOOLEAN;
    signal tmp_22_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_356_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_352_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_363_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_369_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_fu_377_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_420 : BOOLEAN;
    signal ap_sig_cseq_ST_st87_fsm_86 : STD_LOGIC;
    signal ap_sig_429 : BOOLEAN;
    signal z_3_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_ap_start : STD_LOGIC;
    signal grp_fu_154_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);

    component Square3_srem_64ns_5ns_32_68_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Square3_mul_66ns_64s_129_18 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (65 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component Square3_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Square3_duplex_arr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    arr_U : component Square3_duplex_arr
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arr_address0,
        ce0 => arr_ce0,
        we0 => arr_we0,
        d0 => arr_d0,
        q0 => arr_q0,
        address1 => arr_address1,
        ce1 => arr_ce1,
        q1 => arr_q1);

    Square3_srem_64ns_5ns_32_68_seq_U1 : component Square3_srem_64ns_5ns_32_68_seq
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_154_ap_start,
        done => grp_fu_154_ap_done,
        din0 => y_reg_105,
        din1 => grp_fu_154_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    Square3_mul_66ns_64s_129_18_U2 : component Square3_mul_66ns_64s_129_18
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 66,
        din1_WIDTH => 64,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => y_reg_105,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    Square3_mul_32s_32s_32_6_U3 : component Square3_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_138,
        din1 => arr_load_1_reg_511,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    Square3_mul_32s_32s_32_6_U4 : component Square3_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_138,
        din1 => reg_138,
        ce => ap_const_logic_1,
        dout => grp_fu_390_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cou1_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
                cou1_reg_93 <= cou1_1_reg_416;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                cou1_reg_93 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then 
                i_reg_115 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
                i_reg_115 <= i_1_reg_486;
            end if; 
        end if;
    end process;

    y_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
                y_reg_105 <= y_1_reg_473;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_105 <= x;
            end if; 
        end if;
    end process;

    z_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then 
                z_reg_126 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
                z_reg_126 <= z_2_fu_346_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then
                arr_load_1_reg_511 <= arr_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                cou1_1_reg_416 <= cou1_1_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then
                i_1_reg_486 <= i_1_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                mul_reg_453 <= grp_fu_164_p2;
                tmp_21_reg_458 <= grp_fu_164_p2(128 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = tmp_19_reg_426)))) then
                neg_ti_reg_468 <= neg_ti_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then
                p_neg_reg_437 <= p_neg_fu_186_p2;
                tmp_3_reg_432 <= cou1_reg_93(31 downto 31);
                tmp_6_reg_448 <= tmp_6_fu_234_p2;
                tmp_s_reg_442 <= tmp_s_fu_226_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79))) then
                reg_138 <= arr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79)) then
                tmp_14_reg_526 <= tmp_14_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st86_fsm_85) and not((ap_const_lv1_0 = tmp_14_reg_526)))) then
                tmp_16_reg_531 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_17_reg_463 <= tmp_17_fu_269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_142_p2 = ap_const_lv1_0))) then
                tmp_19_reg_426 <= y_reg_105(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77)) then
                tmp_1_reg_516 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = tmp_5_fu_303_p2) and not((ap_const_lv1_0 = tmp_3_reg_432)))) then
                tmp_26_reg_501 <= tmp_26_fu_329_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then
                tmp_2_reg_478 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                y_1_reg_473 <= y_1_fu_285_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_142_p2, tmp_5_fu_303_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_fu_142_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st71_fsm_70;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st71_fsm_70 => 
                if ((ap_const_lv1_0 = tmp_5_fu_303_p2)) then
                    ap_NS_fsm <= ap_ST_st80_fsm_79;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_71;
                end if;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st87_fsm_86)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st87_fsm_86))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st87_fsm_86)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st87_fsm_86)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        z_3_fu_396_p2 when (tmp_14_reg_526(0) = '1') else 
        z_reg_126;

    ap_sig_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_104 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_118 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    ap_sig_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_125 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_167 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_178 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_201 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    ap_sig_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_210 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    ap_sig_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_238 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    ap_sig_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_247 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    ap_sig_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_258 <= (ap_const_lv1_1 = ap_CS_fsm(85 downto 85));
    end process;


    ap_sig_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_281 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    ap_sig_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_387 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    ap_sig_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_420 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    ap_sig_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_429 <= (ap_const_lv1_1 = ap_CS_fsm(86 downto 86));
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_167)
    begin
        if (ap_sig_167) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_104)
    begin
        if (ap_sig_104) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_178)
    begin
        if (ap_sig_178) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_201)
    begin
        if (ap_sig_201) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_281)
    begin
        if (ap_sig_281) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_210)
    begin
        if (ap_sig_210) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_118)
    begin
        if (ap_sig_118) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_387)
    begin
        if (ap_sig_387) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_238)
    begin
        if (ap_sig_238) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st79_fsm_78_assign_proc : process(ap_sig_247)
    begin
        if (ap_sig_247) then 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st80_fsm_79_assign_proc : process(ap_sig_125)
    begin
        if (ap_sig_125) then 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_420)
    begin
        if (ap_sig_420) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st86_fsm_85_assign_proc : process(ap_sig_258)
    begin
        if (ap_sig_258) then 
            ap_sig_cseq_ST_st86_fsm_85 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st86_fsm_85 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st87_fsm_86_assign_proc : process(ap_sig_429)
    begin
        if (ap_sig_429) then 
            ap_sig_cseq_ST_st87_fsm_86 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st87_fsm_86 <= ap_const_logic_0;
        end if; 
    end process;


    arr_address0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, tmp_5_fu_303_p2, ap_sig_cseq_ST_st70_fsm_69, tmp_4_fu_294_p1, tmp_8_fu_319_p1, tmp_15_fu_332_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            arr_address0 <= tmp_4_fu_294_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = tmp_5_fu_303_p2))) then 
            arr_address0 <= tmp_15_fu_332_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and not((ap_const_lv1_0 = tmp_5_fu_303_p2)))) then 
            arr_address0 <= tmp_8_fu_319_p1(5 - 1 downto 0);
        else 
            arr_address0 <= "XXXXX";
        end if; 
    end process;

    arr_address1 <= tmp_9_fu_324_p1(5 - 1 downto 0);

    arr_ce0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, tmp_5_fu_303_p2, ap_sig_cseq_ST_st70_fsm_69)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and not((ap_const_lv1_0 = tmp_5_fu_303_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = tmp_5_fu_303_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d0 <= tmp_2_reg_478(32 - 1 downto 0);

    arr_we0_assign_proc : process(ap_sig_cseq_ST_st70_fsm_69)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cou1_1_fu_148_p2 <= std_logic_vector(unsigned(cou1_reg_93) + unsigned(ap_const_lv32_1));

    grp_fu_154_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_142_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_142_p2 = ap_const_lv1_0))) then 
            grp_fu_154_ap_start <= ap_const_logic_1;
        else 
            grp_fu_154_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_154_p1 <= ap_const_lv64_A(5 - 1 downto 0);
    grp_fu_164_p0 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    i_1_fu_308_p2 <= std_logic_vector(unsigned(i_reg_115) + unsigned(ap_const_lv31_1));
    i_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(i_reg_115),32));
    neg_mul_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv129_lc_2) - unsigned(mul_reg_453));
    neg_ti_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(tmp_18_fu_272_p3));
    p_lshr_f_fu_212_p4 <= cou1_reg_93(31 downto 1);
    p_lshr_fu_192_p4 <= p_neg_fu_186_p2(31 downto 1);
    p_neg_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(cou1_reg_93));
    p_neg_t_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_10_fu_202_p1));
    tmp_10_fu_202_p1 <= std_logic_vector(resize(unsigned(p_lshr_fu_192_p4),32));
    tmp_11_fu_222_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_fu_212_p4),32));
        tmp_13_fu_265_p1 <= std_logic_vector(resize(signed(tmp_20_fu_255_p4),64));

    tmp_14_fu_384_p2 <= "1" when (tmp_24_fu_377_p3 = ap_const_lv2_1) else "0";
        tmp_15_fu_332_p1 <= std_logic_vector(resize(signed(tmp_s_reg_442),64));

        tmp_17_fu_269_p1 <= std_logic_vector(resize(signed(tmp_21_reg_458),64));

    tmp_18_fu_272_p3 <= 
        tmp_13_fu_265_p1 when (tmp_19_reg_426(0) = '1') else 
        tmp_17_fu_269_p1;
    tmp_20_fu_255_p4 <= neg_mul_fu_250_p2(128 downto 68);
    tmp_22_fu_341_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_516),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_23_fu_369_p3 <= (ap_const_lv1_0 & tmp_25_fu_352_p1);
    tmp_24_fu_377_p3 <= 
        tmp_28_fu_363_p2 when (tmp_3_reg_432(0) = '1') else 
        tmp_23_fu_369_p3;
    tmp_25_fu_352_p1 <= cou1_reg_93(1 - 1 downto 0);
    tmp_26_fu_329_p1 <= p_neg_reg_437(1 - 1 downto 0);
    tmp_27_fu_356_p3 <= (ap_const_lv1_0 & tmp_26_reg_501);
    tmp_28_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(tmp_27_fu_356_p3));
    tmp_3_fu_178_p3 <= cou1_reg_93(31 downto 31);
        tmp_4_fu_294_p1 <= std_logic_vector(resize(signed(cou1_reg_93),64));

    tmp_5_fu_303_p2 <= "1" when (signed(i_cast_fu_299_p1) < signed(tmp_s_reg_442)) else "0";
    tmp_6_fu_234_p2 <= std_logic_vector(unsigned(cou1_reg_93) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_7_fu_314_p2 <= std_logic_vector(unsigned(tmp_6_reg_448) - unsigned(i_cast_fu_299_p1));
        tmp_8_fu_319_p1 <= std_logic_vector(resize(signed(tmp_7_fu_314_p2),64));

    tmp_9_fu_324_p1 <= std_logic_vector(resize(unsigned(i_reg_115),64));
    tmp_fu_142_p2 <= "1" when (y_reg_105 = ap_const_lv64_0) else "0";
    tmp_s_fu_226_p3 <= 
        p_neg_t_fu_206_p2 when (tmp_3_fu_178_p3(0) = '1') else 
        tmp_11_fu_222_p1;
    y_1_fu_285_p3 <= 
        neg_ti_reg_468 when (tmp_19_reg_426(0) = '1') else 
        tmp_17_reg_463;
    z_2_fu_346_p2 <= std_logic_vector(unsigned(z_reg_126) + unsigned(tmp_22_fu_341_p2));
    z_3_fu_396_p2 <= std_logic_vector(unsigned(z_reg_126) + unsigned(tmp_16_reg_531));
end behav;
